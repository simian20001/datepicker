<html>
<head>
    <title>This is a test page</title>
</head>
<body>
    <script>
        const template = document.createElement('template');
        
        template.innerHTML = `
        <style>
            .container {
                padding: 8px;
            }
            
            button {
                display: block;
                overflow: hidden;
                position: relative;
                padding: 0 16px;
                font-size: 16px;
                font-weight: bold;
                text-overflow: ellipsis;
                white-space: nowrap;
                cursor: pointer;
                outline: none;
                
                width: 100%;
                height: 40px;
                
                box-sizing: border-box;
                border: 1px solid #a1a1a1;
                background: #ffffff;
                box-shadow: 0 2px 4px 0 rgba(0,0,0, 0.05), 0 2px 8px 0 rgba(161,161,161, 0.4);
                color: #363636;
            }
        </style>
        
        <div class="container">
            <button>Label</button>
        </div>
        `;
        
        class Button extends HTMLElement {
            constructor() {
                super().attachShadow({ mode: 'open' }).append(template.content.cloneNode(true));
                this.$button = this.shadowRoot.querySelector('button');
                this._props = {}; // Object to hold shadow properties for properties with setters
                
                this.$button.addEventListener('click', () => {
                    this.dispatchEvent(
                    new CustomEvent('onClick', {
                        detail: 'Hello from within the Custom Element',
                    })
                    )
                })
            }
            
            // Getters and setters to mirror properties and attributes
            get label() {
                if (this._props.label) return this._props.label;
            }
            
            set label(value) {
                this._props.label = value;
                this.setAttribute('label',value);
            }
            
            // Listen for changes in these attributes
            static get observedAttributes() {
                return ['label'];
            }
            
            attributeChangedCallback(name, oldVal, newVal) {
                // If Property is flagged as having a setter then just update the shadow property
                if ( Object.keys(this._props).indexOf(name) == -1 ) this[name] = newVal;
                else this._props[name] = newVal;
                this.render();
            }
            
            render() {
                this.$button.innerHTML = this.label;
            }
        }
        
        window.customElements.define('my-button', Button);
        function test2(){
            document.querySelector('my-button').label='testing...';
        }
    </script>
    <my-button label="Click Me"></my-button>
    <button onclick="test2()">Two</button>
    <script>
        document.querySelector('my-button').addEventListener('onClick', value => console.log(value.detail));
        
    </script>
</body>
</html>